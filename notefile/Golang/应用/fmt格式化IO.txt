"fmt"包实现了类似C语言printf和scanf的格式化I/O。格式化动作（'verb'）源自C语言但更简单。

========== ========== Printing ========== ==========

Print、Printf、Println标准输出到os.Stdout，
Fprint、Fprintf、Fprintln将参数格式化后写入到指定的io.Writer，
返回写入的字节数和遇到的任何错误。

Sprint、Sprintf、Sprintln串联所有输出生成并返回一个字符串。

Print、Fprint、Sprint采用默认格式将其参数格式化，如果两个相邻的参数都不是字符串，会在它们的输出之间添加空格。

Println、Fprintln、Sprintln总是会在相邻参数的输出之间添加空格并在输出结束后添加换行符。

Printf、Fprintf、Sprintf根据format参数生成格式化的字符串。

通用：
%v	值的默认格式表示
%+v	类似%v，但输出结构体时会添加字段名
%#v	值的Go语法表示
%T	值的类型的Go语法表示
%%	百分号

布尔值：
%t	单词true或false

整数：
%b	表示为二进制
%c	该值对应的unicode码值
%d	表示为十进制
%o	表示为八进制
%q	该值对应的单引号括起来的go语法字符字面值，必要时会采用安全的转义表示
%x	表示为十六进制，使用a-f
%X	表示为十六进制，使用A-F
%U	表示为Unicode格式：U+1234，等价于"U+%04X"

浮点数与复数的两个组分：
%b	无小数部分、二进制指数的科学计数法，如-123456p-78；参见strconv.FormatFloat
%e	科学计数法，如-1234.456e+78
%E	科学计数法，如-1234.456E+78
%f	有小数部分但无指数部分，如123.456
%F	等价于%f
%g	根据实际情况采用%e或%f格式（以获得更简洁、准确的输出）
%G	根据实际情况采用%E或%F格式（以获得更简洁、准确的输出）

字符串和[]byte：
%s	直接输出字符串或者[]byte
%q	该值对应的双引号括起来的go语法字符串字面值，必要时会采用安全的转义表示
%x	每个字节用两字符十六进制数表示（使用a-f）
%X	每个字节用两字符十六进制数表示（使用A-F）    

指针：
%p	表示为十六进制，并加上前导的0x    

宽度通过一个紧跟在百分号后面的十进制数指定，如果未指定宽度，则表示值时除必需之外不作填充。
精度通过宽度后跟点号后跟的十进制数指定。如果未指定精度，会使用默认精度；如果点号后没有跟数字，表示精度为0。
	%06d:  不足6位整数填充前导0
	%f:    默认宽度，默认精度
	%9f    宽度9，默认精度
	%.2f   默认宽度，精度2
	%9.2f  宽度9，精度2
	%9.f   宽度9，精度0  

其它flag：
'+'	总是输出数值的正负号；对%q（%+q）会生成全部是ASCII字符的输出（通过转义）；
' '	对数值，正数前加空格而负数前加负号；
'-'	在输出右边填充空白而不是默认的左边（即从默认的右对齐切换为左对齐）；
'#'	切换格式：
  	八进制数前加0（%#o），十六进制数前加0x（%#x）或0X（%#X），指针去掉前面的0x（%#p）；
 	对%q（%#q），如果strconv.CanBackquote返回真会输出反引号括起来的未转义字符串；
 	对%U（%#U），输出Unicode格式后，如字符可打印，还会输出空格和单引号括起来的go字面值；
  	对字符串采用%x或%X时（% x或% X）会给各打印的字节之间加空格；
'0'	使用0而不是空格填充，对于数值类型会把填充的0放在正负号后面；

verb会忽略不支持的flag。
除了%T和%p之外；对实现了特定接口的操作数会考虑采用特殊的格式化技巧。按应用优先级如下：
	1. 如果操作数实现了Formatter接口，会调用该接口的方法。Formatter提供了格式化的控制。
	2. 如果verb %v配合flag #使用（%#v），且操作数实现了GoStringer接口，会调用该接口。
	如果操作数满足如下两条任一条，对于%s、%q、%v、%x、%X五个verb，将考虑：
	3. 如果操作数实现了error接口，Error方法会用来生成字符串，随后将按给出的flag（如果有）和verb格式化。
	4. 如果操作数具有String方法，这个方法将被用来生成字符串，然后将按给出的flag（如果有）和verb格式化。
	复合类型的操作数，如切片和结构体，格式化动作verb递归地应用于其每一个成员，而不是作为整体一个操作数使用。
	因此%q会将[]string的每一个成员括起来，%6.2f会控制浮点数组的每一个元素的格式化。

显式指定参数索引：
在Printf、Sprintf、Fprintf三个函数中，默认的行为是对每一个格式化verb依次对应调用时成功传递进来的参数。
但是，紧跟在verb之前的[n]符号表示应格式化第n个参数（索引从1开始）。
	fmt.Sprintf("%d %d %#[1]x %#x", 16, 17)会生成"16 17 0x10 0x11"

========== ========== Scanning ========== ==========

Scan、Scanf和Scanln从标准输入os.Stdin读取文本；
Fscan、Fscanf、Fscanln从指定的io.Reader接口读取文本；
Sscan、Sscanf、Sscanln从一个参数字符串读取文本。

Scanln、Fscanln、Sscanln会在读取到换行时停止，并要求一次提供一行所有条目；
Scanf、Fscanf、Sscanf只有在格式化文本末端有换行时会读取到换行为止；其他函数会将换行视为空白。

Scanf、Fscanf、Sscanf会根据格式字符串解析参数，类似Printf。
例如%x会读取一个十六进制的整数，%v会按对应值的默认格式读取。格式规则类似Printf，有如下区别：
	%p 未实现
	%T 未实现
	%e %E %f %F %g %G 效果相同，用于读取浮点数或复数类型
	%s %v 用在字符串时会读取空白分隔的一个片段
	flag '#'和'+' 未实现   

在无格式化verb或verb为%v下扫描整数时会接受常用的进制设置前缀0（八进制）和0x（十六进制）。
宽度会在输入文本中被使用（%5s表示最多读取5个rune来生成一个字符串），但没有使用精度的语法（没有%5.2f，只有%5f）。
当使用格式字符串进行扫描时，多个连续的空白字符（除了换行符）在输出和输出中都被等价于一个空白符。
在此前提下，格式字符串中的文本必须匹配输入的文本；如果不匹配扫描会中止，函数的整数返回值说明已经扫描并填写的参数个数。
在所有的扫描函数里，\r\n都被视为\n。
在所有的扫描函数里，如果一个操作数实现了Scan方法（或者说，它实现了Scanner接口），将会使用该接口为该操作数扫描文本。
另外，如果如果扫描到（准备填写）的参数比提供的参数个数少，会返回一个错误。
提供的所有参数必须为指针或者实现了Scanner接口。

========== ========== ========== ========== ==========

func Printf(format string, a ...any) (n int, err error)

func Fprintf(w io.Writer, format string, a ...any) (n int, err error)

func Sprintf(format string, a ...any) string

func Print(a ...any) (n int, err error)

func Fprint(w io.Writer, a ...any) (n int, err error)

func Sprint(a ...any) string

func Println(a ...any) (n int, err error)

func Fprintln(w io.Writer, a ...any) (n int, err error)

func Sprintln(a ...any) string

func Scanf(format string, a ...any) (n int, err error)

func Fscanf(r io.Reader, format string, a ...any) (n int, err error)

func Sscanf(str string, format string, a ...any) (n int, err error)

func Scan(a ...any) (n int, err error)

func Fscan(r io.Reader, a ...any) (n int, err error)

func Sscan(str string, a ...any) (n int, err error)

func Scanln(a ...any) (n int, err error)

func Fscanln(r io.Reader, a ...any) (n int, err error)

func Sscanln(str string, a ...any) (n int, err error)

func Errorf(format string, a ...any) error
根据format参数生成格式化字符串并返回一个包含该字符串的错误。

========== ========== ========== ========== ==========

控制台使用不同颜色输出format：
	"\x1b"或"\u001B"或"\033" 开始标记
	"[%d;%d;%dm" 显示方式、字体色、背景色。最后一个";%d"可省略，使用默认背景色。
	此处到结束标记内容会按照设置输出。
	开始标记+"[0m" 结束标记，恢复默认的中断样式。
	显示方式：0默认，4使用下划线，7反白
	字体色30~37依次是：黑 红 绿 黄 蓝 紫 青 灰
	背景色40~48依次是：黑(红 绿 黄 蓝 紫 青 灰)白，括号中的均比字体色淡浅
	for i := 30; i < 38; i++ {
		for j := 40; j < 49; j++ {
			fmt.Printf("\x1b[0;%d;%dm(%[1]v,%[2]v)\x1b[0m\n", i, j)
		}
	}

控制台输入输出：
	var a, b int
	fmt.Scanln(&a, &b) //或 fmt.Scanf("%d %d", &a, &b)
	sum := a + b
	fmt.Println("sum:", sum)

========== ========== ========== ========== ==========

fmt包格式化字符串的时间空间效率都很差，尽量避免在生产环境中使用。
bad-example -->> good-example:
fmt.Sprintf("%s:%s", <string-1>, <string-2>) -->> <string-1> + ":" + <string-2>
fmt.Errorf(<string>) -->> errors.New(<string>)
fmt.Sprintf("%d", <int64>) -->> strconv.FormatInt(<int64>, 10)
fmt.Sprintf("%T", <any>) -->> reflect.TypeOf(<any>).String()
fmt.Sprintf("%x", <[]byte>) -->> hex.EncodeToString(<[]byte>)

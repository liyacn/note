"strings"包实现了用于操作字符的简单函数。


func HasPrefix(s, prefix string) bool
判断s是否有前缀字符串prefix

func HasSuffix(s, suffix string) bool
判断s是否有后缀字符串suffix

func Contains(s, substr string) bool
判断字符串s是否包含子串substr

func ContainsAny(s, chars string) bool
判断字符串s是否包含字符串chars中的任一字符

func ContainsRune(s string, r rune) bool
判断字符串s是否包含utf-8码值r

func Count(s, substr string) int
返回字符串s中有几个不重复的sep子串。
	strings.Count("cheese", "e") //3
	strings.Count("five", "") //5(每个字符前后)

func Repeat(s string, count int) string
返回count个s串联的字符串


func Index(s, substr string) int
子串sep在字符串s中第一次出现的位置，不存在则返回-1。

func LastIndex(s, substr string) int
子串sep在字符串s中最后一次出现的位置，不存在则返回-1。

func IndexByte(s string, c byte) int
字符c在s中第一次出现的位置，不存在则返回-1。

func LastIndexByte(s string, c byte) int
字符c在s中最后一次出现的位置，不存在则返回-1。

func IndexRune(s string, r rune) int
unicode码值r在s中第一次出现的位置，不存在则返回-1。

func IndexFunc(s string, f func(rune) bool) int
s中第一个满足函数f的位置，不存在则返回-1。

func LastIndexFunc(s string, f func(rune) bool) int
s中最后一个满足函数f的位置，不存在则返回-1。

func IndexAny(s, chars string) int
字符串chars中的任一utf-8码值在s中第一次出现的位置，如果不存在或者chars为空字符串则返回-1。

func LastIndexAny(s, chars string) int
字符串chars中的任一utf-8码值在s中最后一次出现的位置，如不存在或者chars为空字符串则返回-1。


func Lines(s string) iter.Seq[string]
返回一个迭代器，遍历字符串s中以换行符结尾的行。迭代器生成的行包括它们的换行符。
如果s为空，迭代器根本不生成行。如果s不以换行符结尾，那么最终的输出行将不以换行符结尾。

func Join(elems []string, sep string) string
使用sep分隔符将一系列字符串连接为一个字符串。

func Split(s, sep string) []string
用sep的对s进行分割，会分割到结尾，并返回生成的所有片段组成的切片（去掉sep）。
每一个sep都会进行一次切割，即使两个sep相邻，也会进行两次切割。
如果sep为空字符，会将s切分成每一个unicode码值一个字符串。
func SplitSeq(s, sep string) iter.Seq[string]

func SplitAfter(s, sep string) []string
用sep的对s进行分割，会分割到结尾，并返回生成的所有片段组成的切片（sep保留在对应位置）。
func SplitAfterSeq(s, sep string) iter.Seq[string]

func SplitN(s, sep string, n int) []string
通过参数n指定Split分割操作行为：
	n > 0 : 返回的切片最多n个子字符串；最后一个子字符串包含未进行切割的部分。
	n == 0: 返回nil。
	n < 0 : 返回所有的子字符串组成的切片。

func SplitAfterN(s, sep string, n int) []string
通过参数n指定SplitAfter分割行为，n的作用跟SplitN中相同。


func Fields(s string) []string
返回将字符串按照空白（unicode.IsSpace确定，可以是一到多个连续的空白字符）分割的多个字符串。
如果字符串全部是空白或者是空字符串的话，会返回空切片。
func FieldsSeq(s string) iter.Seq[string]

func FieldsFunc(s string, f func(rune) bool) []string
类似Fields，但使用函数f来确定分割符（满足f的unicode码值）。
如果字符串全部是分隔符或者是空字符串的话，会返回空切片。
func FieldsFuncSeq(s string, f func(rune) bool) iter.Seq[string]

func Map(mapping func(rune) rune, s string) string
将s的每一个unicode码值r都替换为mapping(r)，返回这些新码值组成的字符串拷贝。
如果mapping返回一个负值，将会丢弃该码值而不会被替换。（返回值中对应位置将没有码值）


func Compare(a, b string) int 
按字典顺序比较a和b，返回：-1(<),0(=),1(>)

func EqualFold(s, t string) bool
判断两个utf-8编码字符串是否相同，将unicode大写、小写、标题三种格式字符视为相同。

func ToUpper(s string) string
返回将所有字母都转为对应的大写版本的拷贝。

func ToLower(s string) string
返回将所有字母都转为对应的小写版本的拷贝。

func ToValidUTF8(s, replacement string) string
返回一个副本，将s中无效的utf8字符替换为replacement。


func Cut(s, sep string) (before, after string, found bool)
在sep的第一个实例周围剪切s，返回sep前后的文本，以及sep是否出现在s中。如果sep未出现在s，则返回s,"",false。

func CutPrefix(s, prefix string) (after string, found bool)
返回切掉前缀prefix字符串的s，以及是否找到前缀。如果s不以前缀开头，将返回s,false。如果prefix是空字符串，则返回s,true。

func CutSuffix(s, suffix string) (before string, found bool) 
返回切掉后缀suffix字符串的s，以及是否找到后缀。如果s不以后缀结尾，将返回s,false。如果prefix是空字符串，则返回s,true。

func TrimLeft(s, cutset string) string
返回将s左边所有cutset去掉的字符串。

func TrimRight(s, cutset string) string
返回将s右边所有cutset去掉的字符串。

func Trim(s, cutset string) string
返回将s两边所有cutset去掉的字符串。

func TrimLeftFunc(s string, f func(rune) bool) string
返回将s左边所有满足f的字符去掉的字符串。

func TrimRightFunc(s string, f func(rune) bool) string
返回将s右边所有满足f的字符去掉的字符串。

func TrimFunc(s string, f func(rune) bool) string
返回将s两边所有满足f的字符去掉的字符串。

func TrimSpace(s string) string
返回将s两边所有空白（unicode.IsSpace指定）去掉的字符串。

func TrimPrefix(s, prefix string) string
返回去除s可能的前缀prefix的字符串。

func TrimSuffix(s, suffix string) string
返回去除s可能的后缀suffix的字符串。


func Replace(s, old, new string, n int) string
返回将s中前n个不重叠old子串都替换为new的新字符串，如果n<0会替换所有old子串。
如果old为空，会在s开头和每个字符之间插入new。

func ReplaceAll(s, old, new string) string
等价于Replace不限个数的全部替换。

func NewReplacer(oldnew ...string) *Replacer
使用提供的多组old、new字符串对创建并返回一个*Replacer。
替换是依次进行的，匹配时不会重叠。old、new必须成对个数，否则会panic。

func (r *Replacer) Replace(s string) string
返回s的所有替换进行完后的拷贝。

func (r *Replacer) WriteString(w io.Writer, s string) (n int, err error)
向w中写入s的所有替换进行完后的拷贝。


func NewReader(s string) *Reader
创建一个从s读取数据的Reader。类似bytes.NewBufferString，但是更有效率，且为只读的。

func (r *Reader) Read(b []byte) (n int, err error)
实现io.Reader接口

func (r *Reader) ReadAt(b []byte, off int64) (n int, err error)
实现io.ReaderAt接口

func (r *Reader) ReadByte() (byte, error)
实现io.ByteReader接口

func (r *Reader) UnreadByte() error
实现io.ByteScanner接口

func (r *Reader) ReadRune() (ch rune, size int, err error)
实现io.RuneReader接口

func (r *Reader) UnreadRune() error
实现io.RuneScanner接口

func (r *Reader) Seek(offset int64, whence int) (int64, error)
实现io.Seeker接口

func (r *Reader) WriteTo(w io.Writer) (n int64, err error)
实现io.WriterTo接口

func (r *Reader) Size() int64
返回基础字符串的原始长度，返回的值始终相同。

func (r *Reader) Len() int
返回未读部分的字节数。

func (r *Reader) Reset(s string)
重置为从s读取。


type Builder struct {
	// 包含不可导出字段
}

func (b *Builder) String() string
返回生成的字符串

func (b *Builder) Len() int
返回生成的字节数，等于len(b.String())

func (b *Builder) Cap() int
返回底层字节数组的总容量。

func (b *Builder) Grow(n int)
需要时增加b的容量，以保证至少可以将n字节写入而无需再进行分配。

func (b *Builder) Write(p []byte) (int, error)
将p的内容追加到b的缓冲区，总是返回len(p),nil。

func (b *Builder) WriteByte(c byte) error
将字符c追加到b的缓冲区，总是返回nil。

func (b *Builder) WriteRune(r rune) (int, error)
将utf8字符r追加到b的缓冲区，总是返回r的长度和nil。

func (b *Builder) WriteString(s string) (int, error)
将字符串s的内容追加到b的缓冲区，总是返回s的长度和nil。

func (b *Builder) Reset()
重置为空


========== ========== ========== ========== ==========

长字符串拼接，使用strings.Builder性能上大大优于直接使用+号拼接。
strings.Join函数使用了strings.Builder结构，并做了进一步优化。

func ConcatA(s []string) string {
	res := ""
	for _, v := range s {
		res += v
	}
	return res
}
func ConcatB(s []string) string {
	var b strings.Builder
	for _, v := range s {
		b.WriteString(v)
	}
	return b.String()
}
func ConcatC(s []string) string {
	return strings.Join(s, "")
}

以上三个函数的时间和空间性能对比： A << B < C
如果需要拼接成字符串的原始片断是字节数组，则性能对比：
每个[]byte转成string后拼接 < 使用string.Builder结构 < 使用bytes.Join函数

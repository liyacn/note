Dockerfile参考：https://docs.docker.com/reference/dockerfile/
docker官方镜像列表：https://hub.docker.com/search?q=&image_filter=official

构建镜像时不应该将无关文件复制到镜像，可以通过.dockerignore文件指定忽略文件和目录。
Dockerfile一般采用多阶段构建，将编译环境和运行环境分割，使得构建的镜像尽可能轻量。

如需在构建时传递命令参数，需声明
ARG 参数名[=默认值]
FROM指令之前声明的ARG只能用于FROM指令(可多个)，FROM后声明的ARG才可以用于当前stage阶段指令。
使用 ${参数名}

========== ========== Go项目构建 ========== ==========

golang:xx-alpine镜像要比golang:xx镜像小约70%，后者自带时区文件，
前者缺少时区文件可通过apk命令添加：RUN apk add --no-cache tzdata

FROM golang:1.22-alpine as builder
WORKDIR /build
ENV CGO_ENABLED=0 GOOS=linux GOARCH=amd64 \
    GOPROXY=https://goproxy.cn,direct \
    GOSUMDB=sum.golang.google.cn
COPY . .
RUN apk add --no-cache tzdata && \
    go mod tidy && go build -o app

第一阶段使用golang镜像构建，生成的二进制文件位于/build/app
第二阶段需将二进制文件和运行所依赖的文件复制到基础镜像中。
基础镜像可以包含操作系统也可以是一个空镜像，常用的对比如下：
alpine：约7M大小，包含了一个最小规模的Linux发行版，自带证书文件，缺少时区文件。
scratch：空镜像，无法在容器内运行终端，缺少证书和时区文件。

FROM scratch
WORKDIR /app
COPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/ca-certificates.crt
COPY --from=builder /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
COPY --from=builder /build/app .
COPY filename .
COPY dirname dirname
ENTRYPOINT ["./app"]

scratch构建出来的镜像比alpine的小7M多，差值大约就是alpine基础镜像的大小。
证书和时区文件也可以从宿主机复制到镜像，但是从上一阶段复制跨平台更友好。

========== ========== .NET项目构建 ========== ==========

mcr.microsoft.com/dotnet/sdk:8.0镜像约892M，用于第一阶段构建。
mcr.microsoft.com/dotnet/aspnet:8.0镜像约249M，用于第二阶段部署。

# Build
FROM mcr.microsoft.com/dotnet/sdk:8.0 AS builder
WORKDIR /build
COPY . .
RUN dotnet restore && dotnet publish -c Release -o app -p:AssemblyName=app

# Deploy
FROM mcr.microsoft.com/dotnet/aspnet:8.0
WORKDIR /app
COPY --from=builder /build/app .
ENTRYPOINT ["dotnet", "app.dll"]

========== ========== 前端静态项目构建 ========== ==========

node:xx-alpine镜像要比node:xx镜像小约85%，构建阶段可选前者。

FROM node:20-alpine as builder
WORKDIR /build
COPY . .
RUN npm install --registry=https://registry.npmmirror.com && npm run build

第一阶段使用node镜像编译打包到/build/dist目录。
第二阶段通常基于nginx镜像，官方的nginx镜像大小约192M。需将第一阶段打包生成的目录复制到基础镜像中。
使用自定义的nginx.conf文件替换镜像中/etc/nginx/conf.d/default.conf

自定义的nginx配置只需以下几行
server {
   listen       80;
   server_name  localhost;
   location / {
      root       /www;
      index      index.html;
      try_files  $uri  $uri/  /index.html;
   }
}
容器内的nginx只作静态代理，其余的gzip压缩、缓存、限流、域名证书等配置都放在网关ingress入口做。

FROM nginx:stable
COPY nginx.conf /etc/nginx/conf.d/default.conf 
COPY --from=builder /build/dist www
ENTRYPOINT ["nginx", "-g", "daemon off;"]
